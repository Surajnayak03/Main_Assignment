[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\surajnayak\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\surajnayak\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 1.8.0_321)
[debug]       Load.loadUnit: plugins took 175.5933ms
[debug]       Load.loadUnit: defsScala took 0.5562ms
[debug] [Loading] Scanning directory C:\Users\surajnayak\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\surajnayak\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 26.215 ms
[debug]           Load.resolveProject(global-plugins) took 63.3701ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\surajnayak\.sbt\1.0\plugins, plugins: List(<none>))) took 127.6899ms
[debug] [Loading] Done in C:\Users\surajnayak\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 156.4246ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3443ms
[debug]     Load.loadUnit(file:/C:/Users/surajnayak/.sbt/1.0/plugins/, ...) took 355.0448ms
[debug]   Load.apply: load took 593.9074ms
[debug]   Load.apply: resolveProjects took 8.5521ms
[debug]   Load.apply: finalTransforms took 102.9256ms
[debug]   Load.apply: config.delegates took 22.2544ms
[debug]   Load.apply: Def.make(settings)... took 665.6625ms
[debug]   Load.apply: structureIndex took 180.2937ms
[debug]   Load.apply: mkStreams took 3.5624ms
[info] loading global plugins from C:\Users\surajnayak\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5212.3388ms
[debug]           Load.loadUnit: plugins took 119.6365ms
[debug]           Load.loadUnit: defsScala took 0.0084ms
[debug] [Loading] Scanning directory C:\Users\surajnayak\IdeaProjects\M0vie_data_spark\project
[debug]             Load.loadUnit: mkEval took 17.894ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\surajnayak\IdeaProjects\M0vie_data_spark\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 5.5569 ms
[info] loading settings for project m0vie_data_spark-build from idea.sbt ...
[debug]               Load.resolveProject(m0vie_data_spark-build) took 9.0394ms
[debug]             Load.loadTransitive: finalizeProject(Project(id m0vie_data_spark-build, base: C:\Users\surajnayak\IdeaProjects\M0vie_data_spark\project, plugins: List(<none>))) took 16.4856ms
[debug] [Loading] Done in C:\Users\surajnayak\IdeaProjects\M0vie_data_spark\project, returning: (m0vie_data_spark-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3587.6205ms
[debug]           Load.loadUnit: cleanEvalClasses took 16.6211ms
[debug]         Load.loadUnit(file:/C:/Users/surajnayak/IdeaProjects/M0vie_data_spark/project/, ...) took 3728.8984ms
[debug]       Load.apply: load took 3733.9319ms
[debug]       Load.apply: resolveProjects took 0.7521ms
[debug]       Load.apply: finalTransforms took 33.329ms
[debug]       Load.apply: config.delegates took 0.9364ms
[debug]       Load.apply: Def.make(settings)... took 156.5874ms
[debug]       Load.apply: structureIndex took 38.5141ms
[debug]       Load.apply: mkStreams took 0.0037ms
[info] loading project definition from C:\Users\surajnayak\IdeaProjects\M0vie_data_spark\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 9152.4974ms
[debug]     Load.loadUnit: defsScala took 0.004ms
[debug] [Loading] Scanning directory C:\Users\surajnayak\IdeaProjects\M0vie_data_spark
[debug]       Load.loadUnit: mkEval took 0.5626ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.5756 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 53.4226ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\surajnayak\IdeaProjects\M0vie_data_spark, plugins: List(<none>))) took 60.7839ms
[debug] [Loading] Done in C:\Users\surajnayak\IdeaProjects\M0vie_data_spark, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2375.5219ms
[debug]     Load.loadUnit: cleanEvalClasses took 44.4213ms
[debug]   Load.loadUnit(file:/C:/Users/surajnayak/IdeaProjects/M0vie_data_spark/, ...) took 11573.4279ms
[debug] Load.apply: load took 11576.7499ms
[debug] Load.apply: resolveProjects took 0.1514ms
[debug] Load.apply: finalTransforms took 31.431ms
[debug] Load.apply: config.delegates took 0.3471ms
[debug] Load.apply: Def.make(settings)... took 79.2144ms
[debug] Load.apply: structureIndex took 30.4994ms
[debug] Load.apply: mkStreams took 0.0034ms
[info] set current project to M0vie_data_spark (in build file:/C:/Users/surajnayak/IdeaProjects/M0vie_data_spark/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63524 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63524, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to M0vie_data_spark (in build file:/C:/Users/surajnayak/IdeaProjects/M0vie_data_spark/)
[debug] > Exec(idea-shell, None, None)
